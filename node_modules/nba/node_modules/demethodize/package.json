{
  "name": "demethodize",
  "version": "0.2.0",
  "description": "Decontextualize your methods",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/nickb1080/demethodize.git"
  },
  "scripts": {
    "test": "mocha -R spec test.js",
    "bench": "node bench.js",
    "bench100": "node bench.js 100",
    "bench1000": "node bench.js 1000"
  },
  "author": {
    "name": "Nick Bottomley",
    "url": "github.com/nickb1080"
  },
  "license": "MIT",
  "devDependencies": {
    "benchmark": "^1.0.0",
    "chai": "^1.9.1",
    "mocha": "^1.21.4"
  },
  "readme": "# Demethodize\nDemethodizing allows you to use methods as generics. You can just use call and apply to do this, like so:\n```js\nArray.prototype.map.call( 'abcdef', function ( letter ) {\n  return letter.toUpperCase();\n}); // ['A', 'B', 'C', 'D', 'E', 'F']\n```\nThis is kind of verbose if you're using it a lot. `Array.prototype.map` can be simply substituted with `[].map`. This gets even easier still with demethodize, which produces reusable functions.\n\n```js\nvar map = demethodize( [].map );\nmap( 'abcdef', function ( letter ) {\n  return letter.toUpperCase();\n}); // ['A', 'B', 'C', 'D', 'E', 'F']\n\nmap( '123456', function ( n) {\n  return Number( n ) + 1;\n}); // [2, 3, 4, 5, 6, 7]\n```\n\nI've benchmarked a number of equivalent implementations for speed, and am using an implementation with `.apply()` as it is fastest.\n\n**Example benchmark output** (see bench.js for implementations)\n```\nHang tight, running benchmarks...\n........\napply 2 is fastest.\napply 2 x 1,373,646 ops/sec ±1.48% (91 runs sampled)\napply 1 is 3.98% slower than fastest.\napply 1 x 1,318,984 ops/sec ±2.58% (89 runs sampled)\ncall spread is 16.82% slower than fastest.\ncall spread x 1,142,603 ops/sec ±5.11% (75 runs sampled)\ncall bind 2 is 18.85% slower than fastest.\ncall bind 2 x 1,114,747 ops/sec ±1.47% (89 runs sampled)\ncall bind 1 is 20.31% slower than fastest.\ncall bind 1 x 1,094,665 ops/sec ±1.92% (91 runs sampled)\ndouble bind is 21.23% slower than fastest.\ndouble bind x 1,082,039 ops/sec ±2.07% (89 runs sampled)\ncall bind 3 is 23.46% slower than fastest.\ncall bind 3 x 1,051,395 ops/sec ±1.76% (89 runs sampled)\napply 3 is 54.54% slower than fastest.\napply 3 x 624,405 ops/sec ±4.53% (84 runs sampled)\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nickb1080/demethodize/issues"
  },
  "homepage": "https://github.com/nickb1080/demethodize",
  "_id": "demethodize@0.2.0",
  "dist": {
    "shasum": "df3b10cdd2d24571f6f6e9bcfd139add614e93e7"
  },
  "_from": "demethodize@^0.2.0",
  "_resolved": "https://registry.npmjs.org/demethodize/-/demethodize-0.2.0.tgz"
}
